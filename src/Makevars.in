# Emacs please make this -*- mode: makefile; tab-width: 8 -*-
#
#
# Copyright (C) 2013-2015      <jean-michel.perraud@csiro.au>
#

# WARNING: Makevars is generated from Makevars.in
# You may loose direct modifications to the file Makevars!

BUILDTYPE ?= Release

# as of mono 4.0.3 on Debian, using monosgen fails. Need to offer the option to revert to boehm GC.
MONO_LIB ?= monosgen-2
# other acceptable option is MONO_LIB = mono-2

TGTPLATFORM=Any CPU

PKG_CPPFLAGS = --std=c++11 -lsupc++

MONO_INSTALL_PATH=@MONO_INSTALL_PATH@
MONO_INSTALL_PATH64=@MONO_INSTALL_PATH64@
OBJECTS=rClrMono.o
ifeq "$(MONO_INSTALL_PATH)" ""
XBUILD=xbuild
else
XBUILD=$(MONO_INSTALL_PATH)/bin/xbuild
endif

# May 2019: >>>> xbuild tool is deprecated and will be removed in future updates, use msbuild instead <<<<
XBUILD=msbuild
# however, the msbuild that comes with dotnet 2.2 fails (error MSB4018: System.TypeLoadException: Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder) 
# so still:
# XBUILD=xbuild

NUGET_CMD=nuget

SLN=rClr_monodev.sln

######## O/S dependent config
ifeq "$(R_OSTYPE)" "windows"
## Note that as of 2015-08, the section for windows is not in active use. 

ifeq "$(BUILDTYPE)" "Release"
BuildConfiguration=MonoInstall
else
BuildConfiguration=MonoInstallDebug
endif  # ifeq "$(BUILDTYPE)" "Release"

RCLR_LIBS=rClrMono$(SHLIB_EXT)

# On a Win7 machine,  'pkg-config --cflags mono-2 glib-2.0'   returns
# -mno-cygwin -mms-bitfields -mwindows -IF:/bin/Mono/include/mono-2.0 -IF:/bin/Mono/include/glib-2.0 -IF:/bin/Mono/lib/glib-2.0/include
# however 'which pkg-config' is in /cygdrive/f/bin/Mono/bin/pkg-config, something unusual for windows machines (?).
# Not sure what is to be expected on CRAN winbuilder.
# -mno-cygwin is a trouble flag somehow, not to be included.
# pkg-config --libs mono-2 glib-2.0
# -Wl,--export-all-symbols -mno-cygwin -mms-bitfields -mwindows -LF:/bin/Mono/lib
# -lmono-2.0 -lws2_32 -lpsapi -lole32 -lwinmm -loleaut32 -ladvapi32 -lversion -lgl
# ib-2.0 -lintl
PKG_CFLAGS = 	-mms-bitfields -mwindows -I"$(MONO_INSTALL_PATH)/include/mono-2.0" -I"$(MONO_INSTALL_PATH)/include/glib-2.0" -I"$(MONO_INSTALL_PATH)/lib/glib-2.0/include" -D MONO_CLR -D MONO_INST
PKG_LIBS =		-mms-bitfields -mwindows -L"$(MONO_INSTALL_PATH)/lib" -lmono-2.0 -lws2_32 -lpsapi -lole32 -lwinmm -loleaut32 -ladvapi32 -lversion
ifeq "$(R_ARCH)" "/x64"
PKG_LIBS =		-mms-bitfields -mwindows -L"$(MONO_INSTALL_PATH64)/" -lmono-2.0 -lws2_32 -lpsapi -lole32 -lwinmm -loleaut32 -ladvapi32 -lversion
# PKG_LIBS =		-mms-bitfields -mwindows -LF:/bin/mono_built/lib -LF:/bin/mono_built/bin -lmono-2.0 -lws2_32 -lpsapi -lole32 -lwinmm -loleaut32 -ladvapi32 -lversion
endif  ## ifeq "$(R_ARCH)" "/x64"

# not sure the following works anymore. Mono on windows deprecated but with .netcore may revive.
RCLRBINDIRFACADE= ./ClrFacade/bin/$(BuildConfiguration)/netstandard2.0

else  ## the OS is not 'windows'
ifeq "$(BUILDTYPE)" "Release"
BuildConfiguration=Unix
else
BuildConfiguration=UnixDebug
GDEBUG_FLAGS = -ggdb3 -Og # See e.g. https://gcc.gnu.org/onlinedocs/gcc-4.5.4/gcc/Debugging-Options.html#Debugging-Options
endif  ## ifeq "$(BUILDTYPE)" "Release"

PKG_CFLAGS_LOCAL=`pkg-config --cflags $(MONO_LIB) glib-2.0`
PKG_LIBS_LOCAL=`pkg-config --libs $(MONO_LIB) glib-2.0`
PKG_CFLAGS = $(PKG_CFLAGS_LOCAL) -g -D MONO_CLR -D MONO_INST
PKG_LIBS=$(PKG_LIBS_LOCAL)
# TODO: can I avoid having this platform dependent? Why did I not use BuildConfiguration folder under Linux?
RCLRBINDIRFACADE= ./ClrFacade/bin/$(BUILDTYPE)/netstandard2.0
endif  ## end if statement testing on  "$(R_OSTYPE)" is "windows" or not

CLR_FACADE_BINS=$(RCLRBINDIRFACADE)/*.dll*

INSTDIR= ../inst

MODE=Rebuild
MODE=Build
# Note: consoleloggerparameters:ErrorsOnly works with msbuild.exe, but xbuild does not support it
SLNPROPERTIES=/p:Configuration=$(BuildConfiguration) /p:Platform="$(TGTPLATFORM)" /nologo /consoleloggerparameters:ErrorsOnly /verbosity:minimal

RM = 		rm -f

# .PHONY: 	all clean

#all:		printarch  rClrMono$(SHLIB_EXT) instdir rClrInstRclrMono rClrLib
all:		printarch  $(SHLIB) instdir rClrLib

clean:
	${RM} $(OBJECTS) $(SHLIB) $(RCLR_LIBS)

rClrMono.o:
	$(CXX) $(GDEBUG_FLAGS) -std=c++11 $(ALL_CPPFLAGS) $(ALL_CFLAGS) -c rClr.cpp -o rClrMono.o -lsupc++
	###### NOTE:
	# On a CentOS OS, I needed to use the following. The CPP and C flags would otherwise return two options not understood:
	# -xHOST -fp-model precise  
	# @echo ALL_CPPFLAGS=$(ALL_CPPFLAGS)
	# @echo ALL_CFLAGS=$(ALL_CFLAGS)
	# $(CXX) -std=c++11 -I/apps/R/3.1.1/lib64/R/include -DNDEBUG  -I/usr/local/include `pkg-config --cflags mono-2 glib-2.0` -g -D MONO_CLR -D MONO_INST -fpic  -O3 -openmp -c rClr.cpp -o rClrMono.o -lsupc++

rClrMono$(SHLIB_EXT): rClrMono.o
	$(CXX) $(GDEBUG_FLAGS) -std=c++11 -shared -Wl,-z,relro -o rClrMono$(SHLIB_EXT) rClrMono.o $(ALL_LIBS)

printarch:
	-@echo **Variable information only for diagnosis purposes**
	-@echo R_ARCH=$(R_ARCH)
	-@echo OBJECTS=$(OBJECTS)
	-@echo SHLIB_EXT=$(SHLIB_EXT)
	-@echo CC=$(CC)
	-@echo CXX=$(CXX)
	-@echo **END Variable**

instdir:
	-@rm -rf $(INSTDIR)/libs$(R_ARCH)
	-@mkdir -p $(INSTDIR) 2>/dev/null
	-@mkdir -p $(INSTDIR)/libs$(R_ARCH) 2>/dev/null

# Note: see explanation for -u -p in Makefile.win. May be unnecessary on Linux?
rClrInstRclrMono:
	cp -u -p rClrMono$(SHLIB_EXT) $(INSTDIR)/libs$(R_ARCH)

rClrLib: rClrLibComp 
	if [ -e symbols.rds ] ; then cp -u -p symbols.rds $(INSTDIR)/libs$(R_ARCH) ; fi
	# using rm -f to prevent the following, which seems to occur even when these should not be write-protected
	#  cp: cannot create regular file `../inst/libs/ClrFacade.dll': Permission denied
	-rm -f $(INSTDIR)/libs/*.*
	-@echo PWD=$(PWD)
	-@echo CLR_FACADE_BINS=$(CLR_FACADE_BINS)
	-cp -u -p $(CLR_FACADE_BINS) $(INSTDIR)/libs

rClrNugetRestore: rClr.cpp
	-$(NUGET_CMD) restore $(SLN) ;

rClrLibComp: rClrNugetRestore
	"$(XBUILD)" $(SLN) /t:$(MODE) $(SLNPROPERTIES)
	



